openapi: 3.0.1
info:
  title: Storage
  description: |
    API for Storage
  version: "1.0"
paths:
  /collections:
    get:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${get_collections}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Collections retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /collections/{collection}/items:
    get:
      parameters:
        - in: path
          name: collection
          schema:
            type: string
          required: true
          description: Name of the collection to be used
          example: "storage"
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${get_items}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Items retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/details"
    put:
      parameters:
        - in: path
          name: collection
          schema:
            type: string
          required: true
          description: Name of the collection to be used
          example: "storage"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/details"
        required: true
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${add_item}
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
      responses:
        201:
          description: Item added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/details"
        400:
          description: Incorrect item details
    options:
      parameters:
        - in: path
          name: collection
          schema:
            type: string
          required: true
          description: Name of the collection to be used
          example: "storage"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
  /collections/{collection}/items/{id}:
    post:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Identifier of the item to be removed
          example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
        - in: path
          name: collection
          schema:
            type: string
          required: true
          description: Name of the collection to be used
          example: "storage"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/details"
        required: true
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${update_item}
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
      responses:
        200:
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/details"
        404:
          description: Item does not exist
        400:
          description: Bad Request
    delete:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Identifier of the item to be removed
          example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
        - in: path
          name: collection
          schema:
            type: string
          required: true
          description: Name of the collection to be used
          example: "storage"
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${delete_item}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Item removed
        404:
          description: Item does not exist
    options:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Identifier of the item to be removed
          example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
        - in: path
          name: collection
          schema:
            type: string
          required: true
          description: Name of the collection to be used
          example: "storage"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE, POST'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    details:
      title: Item Details
      required:
        - name
        - quantity
        - form
        - icon
      type: object
      properties:
        id:
          type: string
          example: "123123"
        name:
          type: string
          example: Paper Towel
        quantity:
          type: number
          example: 5
        form:
          type: string
          example: boxes
        icon:
          type: string
          example: water
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
